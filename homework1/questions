1) На чем основано объектно-ориентированное программирование?

ООП - методология программирования, основанная на представлении программы в виде совокупности взаимодействующих объектов,
каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования.

-------------------------------------------------------------------------------------------------------------------------

2) Какие аспекты следует учитывать при проектировании классов?

Нужно ясно понимать какой класс вы хотите создать. Вот некоторые примеры:

-- Классы-значения, которые моделируют встроенные типы.

-- Базовые классы - строительные блоки иерархии классов.

-- Классы свойств - шаблоны, которые несут информацию о типах.

-- Классы стратегий - являются фрагментами сменного поведения

-- Классы исключений - представляют собой смесь семантики значений и ссылок.

Лучше использовать минимальные классы, чем монолитные. Небольшие классы легче писать, тестировать и использовать.

Используйте композицию вместо наследования. Главное правило в разработке ПО - снижение связности. Если взаимоотношение можно
выразить несколькими способами, лучше использовать самую слабую из возможных взаимосвязей.

-----------------------------------------------------------------------------------------------------------------------------

3) Почему удобно разделять классы на интерфейс и реализацию?

Если в классе будет содержаться и интерфейс и реализация, проблемы могут возникнуть при добавлении новой объекта, который имеет
аналогичное назначение внутри интерфейса, но представляет собой иную реализация. В таком случае мы будем нарушать принципы инкапсуляции,
нам будет необходимо в ручную залезть внутрь класса, который содержит в себе и то, и другое и переопределить все необходимые методы
в классе наследнике. Что намного усложняет работу.

------------------------------------------------------------------------------------------------------------------------------

4) Чем внутреннее связывание отличается от внешнего связывания?

Если внутри единицы трансляции у объекта или функции есть внутреннее связывание,то этот символ виден компоновщику только внутри этой единицы трансляции.
Если же у объекта или функции есть внешнее связывание, то компоновщик сможет видеть его при обработке других единиц трансляции.

--------------------------------------------------------------------------------------------------------------------------------

5) Какими особенностями обладают именованные пространства имен?

К неименованному пространству имен нельзя будет обратиться откуда-то, кроме текущей единицы трансляции.
